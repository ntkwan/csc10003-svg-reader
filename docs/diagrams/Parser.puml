@startuml





/' Objects '/

class Parser {
	-Parser(const std::string& file_name)
	+~Parser()
	-parseCircle(xml_node<>* node, const mColor& fill_color, const mColor& stroke_color, float stroke_width) : Circle*
	+getRoot() : Group*
	-parseLine(xml_node<>* node, const mColor& stroke_color, float stroke_width) : Line*
	+{static} getInstance(const std::string& file_name) : Parser*
	-parsePath(xml_node<>* node, const mColor& fill_color, const mColor& stroke_color, float stroke_width) : Path*
	-parseRect(xml_node<>* node, const mColor& fill_color, const mColor& stroke_color, float stroke_width) : Rect*
	-parseElements(std::string file_name) : SVGElement*
	-parseShape(xml_node<>* node) : SVGElement*
	-root : SVGElement*
	-parseText(xml_node<>* node, const mColor& fill_color, const mColor& stroke_color, float stroke_width) : Text*
	-parseEllipse(xml_node<>* node, const mColor& fill_color, const mColor& stroke_color, float stroke_width) : class Ell*
	-parsePolygon(xml_node<>* node, const mColor& fill_color, const mColor& stroke_color, float stroke_width) : class Plygon*
	-parsePolyline(xml_node<>* node, const mColor& fill_color, const mColor& stroke_color, float stroke_width) : class Plyline*
	-getFloatAttribute(xml_node<>* node, std::string name) : float
	-parseColor(xml_node<>* node, std::string color) : mColor
	-{static} instance : static Parser*
	-getAttribute(xml_node<>* node, std::string name) : std::string
	-parsePathPoints(xml_node<>* node) : std::vector<PathPoint>
	-parsePoints(xml_node<>* node) : std::vector<Vector2Df>
	-getTransformOrder(xml_node<>* node) : std::vector<std::string>
	+printShapesData() : void
}





/' Inheritance relationships '/




/' Aggregation relationships '/

.Parser --> .Parser : -instance






/' Nested objects '/



@enduml
